/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */

buildscript {
    ext {
        lombokVersion = '1.18.20'
        spockVersion = '2.4-M1-groovy-3.0'
        springBootVersion = '2.7.12'
        springDependencyManagementVersion = '1.1.0'
        groovyVersion = '3.0.13'
        springFoxStarterVersion = '3.0.0'
        springFoxSwaggeruiVersion = '3.0.0'
        springFoxSwagger2Version = '3.0.0'
        postgresVersion = '42.2.27'
        flywayVersion = "7.6.0"
        h2DatabaseVersion = "1.4.200"
    }
}

plugins {
    // Apply the groovy plugin to also add support for Groovy (needed for Spock)
    id 'groovy'
    id 'application'
    id 'checkstyle'
    id 'jacoco'
    id 'org.springframework.boot' version '2.7.12'
    id 'io.spring.dependency-management' version '1.1.0'

}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    //spock and groovy
    implementation("org.codehaus.groovy:groovy:${groovyVersion}")
    implementation("org.spockframework:spock-core:${spockVersion}")
    implementation("org.spockframework:spock-spring:${spockVersion}")
    //Lombok
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")

    //
    implementation "org.springframework.boot:spring-boot-starter-jdbc"

    //Spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //SpringFox
    implementation("io.springfox:springfox-boot-starter:${springFoxStarterVersion}")
    implementation ("io.springfox:springfox-swagger-ui:${springFoxSwaggeruiVersion}")
    implementation("io.springfox:springfox-swagger2:${springFoxSwagger2Version}")

    //postgres
    runtimeOnly("org.postgresql:postgresql:${postgresVersion}")
    implementation("org.flywaydb:flyway-core:${flywayVersion}")

    runtimeOnly("com.h2database:h2:${h2DatabaseVersion}")

    //jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'pl.futurecollars.invoicing.InvoicingApplication'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task testWithJpaDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'jpa'
    useJUnitPlatform()
}

check.dependsOn testWithJpaDatabase

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

test {
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.85
            }
        }
        rule {
            limit {
                counter = 'LINE'
                minimum = 0.85
            }
        }
    }


    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'pl/futurecollars/invoicing/InvoicingApplication.class')
        }))
    }
}